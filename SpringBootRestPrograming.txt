			
			Spring Boot ReST Programming

ReST - Representation State Transfer
It means send/receive(trasnfer) data (State) in global format (Representation)
between two different applications which runs on two different server.

Global Formats - XML/JSON -> Used to represent data 
JSON - Java Script Object Notation
XML  - eXtensible Markup Language

Q) HTML v/s XML/JSON?
A) HTML - Create one Webpage
   XML/JSON - Store/Send data

*) Here we have two applications they are: clientApp(Consumer) and ServerApp(Producer)

--------------------------------------------------------------------------------------
*) In Sprng Boot ReST Programming, FC(FrontController) is autoconfigured and
   even Handler Mapping autoconfigured.

*) As a programmer we need to write RestControllers which works for global types
   using HTTP protocol(Methods and Paths).

*) RestController methods returns Body and Status as ResponseEntity object.
  Here Body means data (String, Object, Collection)
  Status means Http Response Status (ex: 200, 404, 500...etc)


*) We have to define clientApplication after server application using
   Client Technologies like Angular, ReactJS..etc

*) We can even test our Server Application using tools
   -> POSTMAN
   -> SWAGGER
   or using CODE
   -> JUnit with Mock

*) Even Spring Boot(Spring f/w) provides RestTemplate(C) that is used to make HTTP calls
   for Spring ReST server application. It is called as Spring Boot Client.
=======================FirstExample==========================================================
#1. Create one Starter Project
 Name : SpringBoot2RestFirstApp
 Dep  : Spring web

#2 RestController

package in.nareshit.raghu.controller;
//ctrl+shift+O
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController // Spring 4.0 -> @Controller + @ResponseBody
@RequestMapping("/student")
public class StudentRestController {

	@GetMapping("/show")
	public ResponseEntity<String> showMsg() {
		String body = "WELCOME TO FIRST APP!";
		HttpStatus status = HttpStatus.OK;
		ResponseEntity<String> response = new ResponseEntity<String>(body, status);
		return response;
	}
}

*) Note:
*) @RestController : This annotation is added in Spring 4.0
*) @RestController is a combination of @Controller and @ResponseBody
*) @ResponseBody will convert return type data into JSON format by default
   (for non String type, Ex: Employee, List<Employee>)
*) ResponseEntity<T> is a class that indicates Http Response given back to client.
   It contains Body (String,Objct,Collection)
   and Http Status -> It is one enum having set of Status constants.
    Here OK(200) indicates successfully request is processed.

*) Http Status is a code(int+String) that is used to indicate finally what happended at server?
  Success, clint data only wrong, server side exception..etc
-*******---------------------------------------------------------------------*******-----
  POSTMAN is a HTTP Client, that is used to make http Requst and gets Response.
  It is uesd for testing purpose.

  *)POSTMAN DOWNLOAD and SETUP:
  Goto >   https://www.postman.com/downloads/
 > Click on > Download the App
 > Select OS based Version
 > Install POSTMAN (next>next>finish)
 > Open POSTMAN APP  > Skip Register (at bottom)

 > Click on (+) Symbol to create new tab
 > Enter details
     Type : GET
     URL  : http://localhost:8081/student/show
 > Click on SEND button
=============================================================================================
*) If URL is not matching then Http Status code is  404 - Not Found
*) if URL is matched but Request Method Type(ex: GET) and Code Method Type(ex:POST)
   are not matched then Http Status code is : 405- Method Not Allowed.
*) If successfully processed then Http Status is : 200 OK.

--Example code#2-------
package in.nareshit.raghu.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/employees")
public class EmployeeRestController {

	@GetMapping("/all")
	public ResponseEntity<String> getEmployees(){
		return new ResponseEntity<String>("FETCHING DATA",HttpStatus.OK);
	}
	
	@PostMapping("/save")
	public ResponseEntity<String> saveEmployee(){
		return new ResponseEntity<String>("SAVING DATA",HttpStatus.OK);
	}
	
	@PutMapping("/modify")
	public ResponseEntity<String> updateEmployee(){
		return new ResponseEntity<String>("MODIFYING DATA",HttpStatus.OK);
	}
	
	@DeleteMapping("/remove")
	public ResponseEntity<String> deleteEmployee(){
		return new ResponseEntity<String>("DELETING DATA",HttpStatus.OK);
	}
	
	
}
--------POSTMAN SCREEN---------------
#1
 GET  http://localhost:8080/employees/all  SEND
#2
 POST  http://localhost:8080/employees/save  SEND
#3
 PUT  http://localhost:8080/employees/modify  SEND
#4
 DELETE  http://localhost:8080/employees/remove  SEND

=====================================================================================
		  JSON - Java Script Object Notation (key:val)

Example JSON:
  { "eid" : 10, "ename": "ABC", "esal" : 3.6 }

=> JSON Follows data in key:val format
=> key must be quoted, value is quoted only if type is String.
=> one {} indicates one Object.

---Example ------------
class Student {
  Integer sid;
  String sname;
  Double sfee;
  //3 params const
}
Student e = new v(101,"SAM",500.0);
JSON :
 { "sid": 101, "sname": "SAM", "sfee":500.0 }

=> Here, Variable in class is taken as JSON key.
         Variable value is taken as key-value in JSON.


--------------1D Collections in JSON--------------------
JSON for List/Set/Array : JSON will stores all these types as array only.

JSON Syntax:   
     "key": [ val1,val2,val3,.... ]

--Example--
class Student {
  Integer sid;
  Set<String> subjects;
  List<Integer> marks;
  String[] grades;
  // all params
}
Java Object:
Student s = new Student(500, 
            Set.of("ENG","MAT","SCI"),
	    List.of(95,65,48),
	    new String[]{"A","B","C"}
	    );
JSON:
 {
   "sid" : 500,
   "subjects" : [ "ENG","MAT","SCI" ],
   "marks"    : [ 95,65,48 ],
   "grades"   : [ "A","B","C" ]
 }
---------------------------------------------------
